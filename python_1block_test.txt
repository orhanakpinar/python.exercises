I might delete it later
for now, these are latest exercises
from learn python the hard way

I learned {} use 
(means: I am ready to operate an e-mail service)

I reviewed functions a bit

And Lists, Dictionaries
Left at OOP: Classes and Modules


>>> print(end1 + end2 + end3 + end4 + end5 + end6, end=' ')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'end1' is not defined
>>>  end1 = "C"
  File "<stdin>", line 1
    end1 = "C"
IndentationError: unexpected indent
>>>  end2 = "h"
  File "<stdin>", line 1
    end2 = "h"
IndentationError: unexpected indent
>>>  end3 = "e"
  File "<stdin>", line 1
    end3 = "e"
IndentationError: unexpected indent
>>>  end4 = "e"
  File "<stdin>", line 1
    end4 = "e"
IndentationError: unexpected indent
>>>  end5 = "s"
  File "<stdin>", line 1
    end5 = "s"
IndentationError: unexpected indent
>>>  end6 = "e"
  File "<stdin>", line 1
    end6 = "e"
IndentationError: unexpected indent
>>> end1 = "a"
>>> end2 = "b"
>>> end3= "c"
>>> end4 = "c"
>>> end4 = "d"
>>> end5 = "e"
>>> end6 = "f"
>>> print(end1 + end2 + end3 + end4 + end5 + end6, end=' ')
abcdef >>>
>>> print(end1 + end2 + end3 + end4 + end5 + end6)
abcdef
>>> print(end1 + end2 + end3 + end4 + end5 + end6, end=' ')
abcdef >>> print(end1 + end2 + end3 + end4 + end5 + end6, end=' ')
abcdef >>>
>>> print("this is a style to not end the line", now= " ")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'now' is an invalid keyword argument for print()
>>> print("this is a style to not end the line", end= " ")
this is a style to not end the line >>> answer = input()
yes it is
>>> print("this is a style to not end the line", end= " ", "{}")
  File "<stdin>", line 1
    print("this is a style to not end the line", end= " ", "{}")
                                                               ^
SyntaxError: positional argument follows keyword argument
>>> print("this is a style to not end the line","{}", end= " ")
this is a style to not end the line {} >>> correction = "be careful"
>>> print(f"this is a style to not end the line.","Actually, {answer}","You must {correction}.", end= " ")
this is a style to not end the line. Actually, {answer} You must {correction}. >>> print(f"this is a style to not end {3} the line.",f"Actually, {answer}",f"You must {correction}.", end= " ")
this is a style to not end 3 the line. Actually, yes it is You must be careful. >>>
>>> from sys import argv
>>> script one two three four = argv
  File "<stdin>", line 1
    script one two three four = argv
           ^
SyntaxError: invalid syntax
>>> script, one, two, three, four = argv
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not enough values to unpack (expected 5, got 1)
>>> script, first, second, third = argv
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not enough values to unpack (expected 4, got 1)
>>> argv
['']
>>> from sys import argv
>>> argv
['']
>>> print("enough, we left at ex14")
enough, we left at ex14
>>>



Microsoft Windows [Version 10.0.19045.3570]
(c) Microsoft Corporation. All rights reserved.

C:\Users\omen>python
Python 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> def my1_func(this):
...     this = this*3
...     print(this)
...
>>> my1_func(243)
729
>>> my1_func(words)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'words' is not defined
>>> my1_func("words")
wordswordswords
>>>

Microsoft Windows [Version 10.0.19045.3570]
(c) Microsoft Corporation. All rights reserved.

C:\Users\omen>python
Python 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> 1 == 1 and 2 == 3
False
>>> 1 == 1 or 2 == 3
True
>>> def bear_room():
...     print("There A BEARR!")
...     print("shhh")
...     bear_moved = False
...
>>> wile True:
  File "<stdin>", line 1
    wile True:
         ^^^^
SyntaxError: invalid syntax
>>> while True:
...     choice = input("> ")
...     if choice == "take honey":
...             dead("bear slaps you")
...     elif choic == "taunt bear" and not bear_moved:
...             print("bear moved")
...             bear_moved = True
...     elif choice == "taunt bear" and bear_moved:
...             dead(" the bear is coming thru")
...     elif choice == "open door" and bear_moved:
...             gold_room()
...     else:
...             print("I dunno")
...
>
Microsoft Windows [Version 10.0.19045.3570]
(c) Microsoft Corporation. All rights reserved.

C:\Users\omen>python
Python 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> ten_things = "Apples Oranges Crows Telephone L
  File "<stdin>", line 1
    ten_things = "Apples Oranges Crows Telephone L
                 ^
SyntaxError: unterminated string literal (detected at line 1)
>>> ten_things = "Apples Oranges Crows Telephone Light Sugar"
>>> print("let's pop this list")
let's pop this list
>>> stuff = ten_things.split("")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: empty separator
>>> stuff = ten_things.split(" ")
>>> more_stuff = ["Day", "Night", "Song"
...  ,
...
... "Frisbee", "Corn", "Banana", "Girl", "Boy"]
>>> print("I just accidentally used multiple lines for creating this list")
I just accidentally used multiple lines for creating this list
>>> while len(stuff) != 10:
...     next_one = more_stuff.pop()
...     print("Adding: ", next_one)
...     stuff.append(next_one)
...     print(f"There are {len(stuff)} items now.")
...
Adding:  Boy
There are 7 items now.
Adding:  Girl
There are 8 items now.
Adding:  Banana
There are 9 items now.
Adding:  Corn
There are 10 items now.
>>> print("this counts backwards")
this counts backwards
>>> states = {
...     "Oregon": "OR",
...     "Florida": "FL"}
>>> cities = {
...     "OR" = "Portland"}
  File "<stdin>", line 2
    "OR" = "Portland"}
    ^^^^
SyntaxError: cannot assign to literal here. Maybe you meant '==' instead of '='?
>>> cities = {
...     "OR": "Portlan"}
>>> cities["FL"] = "Jacksonville"
>>> print("Florida has: ", cities[states["Florida"]])
Florida has:  Jacksonville
>>> print("Oregon has: ", cities[states["Oregon"]])
Oregon has:  Portlan
>>> print("close enough")
close enough
>>> for abbrev, city in list(cities.items()):
...     print(f"{abbrev} has the city {city}")
...
OR has the city Portlan
FL has the city Jacksonville
>>> print("left at OOP, ex40")
left at OOP, ex40
>>>

Numpy Random Exercises

Microsoft Windows [Version 10.0.19045.3570]
(c) Microsoft Corporation. All rights reserved.

C:\Users\omen>python
Python 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import numpy
>>>  a = numpy.array([random.rand(100]).reshape(10,10)
  File "<stdin>", line 1
    a = numpy.array([random.rand(100]).reshape(10,10)
IndentationError: unexpected indent
>>>  a = numpy.array([random.rand(100)]).reshape(10,10)
  File "<stdin>", line 1
    a = numpy.array([random.rand(100)]).reshape(10,10)
IndentationError: unexpected indent
>>>  a = numpy.array([nunpy.random.rand(100)]).reshape(10,10)
  File "<stdin>", line 1
    a = numpy.array([nunpy.random.rand(100)]).reshape(10,10)
IndentationError: unexpected indent
>>>  a = numpy.array([numpy.random.rand(100)]).reshape(10,10)
  File "<stdin>", line 1
    a = numpy.array([numpy.random.rand(100)]).reshape(10,10)
IndentationError: unexpected indent
>>> a = numpy.array([numpy.random.random(100)])
>>> a
array([[0.84627583, 0.95451903, 0.79707094, 0.89473587, 0.96643598,
        0.78931633, 0.49817023, 0.12632492, 0.31125707, 0.78515418,
        0.22399628, 0.53635283, 0.05076595, 0.9362913 , 0.41689432,
        0.50151086, 0.40321517, 0.99022917, 0.77086329, 0.05861416,
        0.53216237, 0.21459326, 0.43282551, 0.15528377, 0.18466808,
        0.84204412, 0.07867775, 0.65399482, 0.64971713, 0.02086933,
        0.20419059, 0.30990336, 0.64623076, 0.00769926, 0.49269886,
        0.32562255, 0.29094655, 0.40640387, 0.6555324 , 0.16336187,
        0.09139257, 0.9471599 , 0.05098606, 0.91080913, 0.01750072,
        0.60241495, 0.13002161, 0.08843084, 0.92943012, 0.01153383,
        0.67972302, 0.40279911, 0.4196615 , 0.77226674, 0.0405687 ,
        0.64826118, 0.65321352, 0.68889577, 0.58609485, 0.22008583,
        0.27483398, 0.75696256, 0.89464783, 0.34154943, 0.1786372 ,
        0.59607031, 0.67590847, 0.71815131, 0.33791202, 0.73110443,
        0.10209511, 0.30840562, 0.6001111 , 0.58031775, 0.13173745,
        0.07230853, 0.92777927, 0.41925919, 0.29379914, 0.64172989,
        0.49228076, 0.13660236, 0.47183434, 0.40369297, 0.09902   ,
        0.75808489, 0.59115985, 0.85064454, 0.8049548 , 0.03570119,
        0.58639717, 0.20127694, 0.477801  , 0.42545204, 0.87604022,
        0.93026343, 0.68765316, 0.7610352 , 0.07739255, 0.41195837]])
>>> a = a.reshape(10,10)
>>> a
array([[0.84627583, 0.95451903, 0.79707094, 0.89473587, 0.96643598,
        0.78931633, 0.49817023, 0.12632492, 0.31125707, 0.78515418],
       [0.22399628, 0.53635283, 0.05076595, 0.9362913 , 0.41689432,
        0.50151086, 0.40321517, 0.99022917, 0.77086329, 0.05861416],
       [0.53216237, 0.21459326, 0.43282551, 0.15528377, 0.18466808,
        0.84204412, 0.07867775, 0.65399482, 0.64971713, 0.02086933],
       [0.20419059, 0.30990336, 0.64623076, 0.00769926, 0.49269886,
        0.32562255, 0.29094655, 0.40640387, 0.6555324 , 0.16336187],
       [0.09139257, 0.9471599 , 0.05098606, 0.91080913, 0.01750072,
        0.60241495, 0.13002161, 0.08843084, 0.92943012, 0.01153383],
       [0.67972302, 0.40279911, 0.4196615 , 0.77226674, 0.0405687 ,
        0.64826118, 0.65321352, 0.68889577, 0.58609485, 0.22008583],
       [0.27483398, 0.75696256, 0.89464783, 0.34154943, 0.1786372 ,
        0.59607031, 0.67590847, 0.71815131, 0.33791202, 0.73110443],
       [0.10209511, 0.30840562, 0.6001111 , 0.58031775, 0.13173745,
        0.07230853, 0.92777927, 0.41925919, 0.29379914, 0.64172989],
       [0.49228076, 0.13660236, 0.47183434, 0.40369297, 0.09902   ,
        0.75808489, 0.59115985, 0.85064454, 0.8049548 , 0.03570119],
       [0.58639717, 0.20127694, 0.477801  , 0.42545204, 0.87604022,
        0.93026343, 0.68765316, 0.7610352 , 0.07739255, 0.41195837]])
>>> print(a)
[[0.84627583 0.95451903 0.79707094 0.89473587 0.96643598 0.78931633
  0.49817023 0.12632492 0.31125707 0.78515418]
 [0.22399628 0.53635283 0.05076595 0.9362913  0.41689432 0.50151086
  0.40321517 0.99022917 0.77086329 0.05861416]
 [0.53216237 0.21459326 0.43282551 0.15528377 0.18466808 0.84204412
  0.07867775 0.65399482 0.64971713 0.02086933]
 [0.20419059 0.30990336 0.64623076 0.00769926 0.49269886 0.32562255
  0.29094655 0.40640387 0.6555324  0.16336187]
 [0.09139257 0.9471599  0.05098606 0.91080913 0.01750072 0.60241495
  0.13002161 0.08843084 0.92943012 0.01153383]
 [0.67972302 0.40279911 0.4196615  0.77226674 0.0405687  0.64826118
  0.65321352 0.68889577 0.58609485 0.22008583]
 [0.27483398 0.75696256 0.89464783 0.34154943 0.1786372  0.59607031
  0.67590847 0.71815131 0.33791202 0.73110443]
 [0.10209511 0.30840562 0.6001111  0.58031775 0.13173745 0.07230853
  0.92777927 0.41925919 0.29379914 0.64172989]
 [0.49228076 0.13660236 0.47183434 0.40369297 0.09902    0.75808489
  0.59115985 0.85064454 0.8049548  0.03570119]
 [0.58639717 0.20127694 0.477801   0.42545204 0.87604022 0.93026343
  0.68765316 0.7610352  0.07739255 0.41195837]]
>>> b = numpy.arange(100).reshape(10,10)
>>> print(b)
[[ 0  1  2  3  4  5  6  7  8  9]
 [10 11 12 13 14 15 16 17 18 19]
 [20 21 22 23 24 25 26 27 28 29]
 [30 31 32 33 34 35 36 37 38 39]
 [40 41 42 43 44 45 46 47 48 49]
 [50 51 52 53 54 55 56 57 58 59]
 [60 61 62 63 64 65 66 67 68 69]
 [70 71 72 73 74 75 76 77 78 79]
 [80 81 82 83 84 85 86 87 88 89]
 [90 91 92 93 94 95 96 97 98 99]]
>>> c = a*b
>>> print(c)
[[ 0.          0.95451903  1.59414189  2.68420762  3.86574393  3.94658167
   2.9890214   0.88427441  2.49005655  7.06638764]
 [ 2.23996278  5.89988115  0.60919136 12.17178692  5.83652042  7.52266287
   6.4514427  16.83389582 13.87553929  1.11366904]
 [10.64324749  4.50645851  9.52216117  3.57152667  4.43203397 21.0511029
   2.04562156 17.65786027 18.19207961  0.60521044]
 [ 6.12571782  9.60700425 20.67938445  0.25407546 16.75176114 11.39678929
  10.47407588 15.03694324 24.91023127  6.37111301]
 [ 3.65570269 38.83355594  2.14141437 39.16479247  0.77003167 27.10867279
   5.98099425  4.15624944 44.61264568  0.56515787]
 [33.98615085 20.54275468 21.82239818 40.93013728  2.19070988 35.65436478
  36.57995714 39.26705868 33.99350136 12.98506386]
 [16.49003881 46.17471602 55.4681653  21.51761405 11.43278067 38.74456989
  44.60995876 48.11613807 22.97801754 50.44620534]
 [ 7.14665747 21.89679923 43.2079989  42.36319564  9.74857107  5.42313938
  70.51122462 32.28295783 22.91633282 50.69666094]
 [39.38246059 11.06479077 38.69041588 33.50651636  8.31767979 64.43721582
  50.8397474  74.0060748  70.83602249  3.17740614]
 [52.77574539 18.31620185 43.95769166 39.56703926 82.34778026 88.37502618
  66.01470351 73.8204142   7.58446952 40.78387835]]
>>> d = sample(100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sample' is not defined
>>> d = random.sample(list(range(10000), 100))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'random' is not defined
>>> import random
>>> d = random.sample(list(range(10000), 100))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list expected at most 1 argument, got 2
>>> d = random.sample(list(range(10000)), 100)
>>> d = d.reshape(10,10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'reshape'
>>> d = numpy.array(d)
>>> d = d.reshape(10,10)
>>> print(d)
[[1143 2446 5145 4357 9321 2110 9009  150 6780 5907]
 [ 872 7771 9546  987 3444 9677 7982 4566 4086  792]
 [2580 4776 7007 6526 8954 6602  300 1996 3025 7661]
 [9116 1678 2452 5015 7284 8603 5937 3874 4237 3680]
 [3020 2896 7265 4105  618 3689 1034 6463 7543 3127]
 [2891 2473 2735 1814 7865  685 3112 9269 9228 6218]
 [6063 5754 4319 2099 5447 6834 4072  305 6709 7814]
 [6172 4475 3506 4507  717 7816 6457 3214 6667 3351]
 [1431 2787 9642 8409 9022 4817 8635 6531 8848 9250]
 [8640 4134 2977 2802 6371 6196 1948 8868 8593 9571]]
>>> e = d**a
>>> print(e)
[[3.87213618e+02 1.71532396e+03 9.08317009e+02 1.80348139e+03
  6.85853558e+03 4.20639873e+02 9.33473858e+01 1.88319176e+00
  1.55774844e+01 9.14333324e+02]
 [4.55685014e+00 1.22086687e+02 1.59235319e+00 6.36140586e+02
  2.98250733e+01 9.97452585e+01 3.74447243e+01 4.20512771e+03
  6.07879295e+02 1.47878944e+00]
 [6.53936597e+01 6.15888953e+00 4.61789858e+01 3.91158499e+00
  5.36798652e+00 1.64564175e+03 1.56636991e+00 1.43975274e+02
  1.82594167e+02 1.20520914e+00]
 [6.43509252e+00 9.98559325e+00 1.55028805e+02 1.06779857e+00
  7.99807098e+01 1.91078026e+01 1.25287090e+01 2.87238043e+01
  2.38591159e+02 3.82405012e+00]
 [2.07992066e+00 1.90053897e+03 1.57350880e+00 1.95451320e+03
  1.11903664e+00 1.40850730e+02 2.46577149e+00 2.17250052e+00
  4.01704113e+03 1.09726677e+00]
 [2.25192567e+02 2.32695325e+01 2.76922779e+01 3.28501377e+02
  1.43894249e+00 6.89077564e+01 1.91293708e+02 5.40595165e+02
  2.10828413e+02 6.83799470e+00]
 [1.09549672e+01 7.01707956e+02 1.78808305e+03 1.36342563e+01
  4.64961169e+00 1.93079375e+02 2.75359226e+02 6.08279521e+01
  1.96369337e+01 7.01611946e+02]
 [2.43772066e+00 1.33636503e+01 1.34054365e+02 1.31951947e+02
  2.37781905e+00 1.91203559e+00 3.42663295e+03 2.95366489e+01
  1.32882403e+01 1.82898347e+02]
 [3.57652009e+01 2.95538336e+00 7.58345068e+01 3.84053473e+01
  2.46407587e+00 6.19237625e+02 2.12305023e+02 1.75869946e+03
  1.50325246e+03 1.38546637e+00]
 [2.03404484e+02 5.34431434e+00 4.56851430e+01 2.92908741e+01
  2.15099227e+03 3.37025359e+03 1.82850538e+02 1.01026266e+03
  2.01592088e+00 4.36504450e+01]]
>>> import matplotlib.pyplot as plt
>>> plt.plot(a,d,"b-o")
[<matplotlib.lines.Line2D object at 0x0000016A2F032AD0>, <matplotlib.lines.Line2D object at 0x0000016A2F043A50>, <matplotlib.lines.Line2D object at 0x0000016A30C80990>, <matplotlib.lines.Line2D object at 0x0000016A30C80A90>, <matplotlib.lines.Line2D object at 0x0000016A30C81250>, <matplotlib.lines.Line2D object at 0x0000016A30C81AD0>, <matplotlib.lines.Line2D object at 0x0000016A30C81F90>, <matplotlib.lines.Line2D object at 0x0000016A30C81CD0>, <matplotlib.lines.Line2D object at 0x0000016A30C82490>, <matplotlib.lines.Line2D object at 0x0000016A30C81650>]
>>> plt.show()
>>>