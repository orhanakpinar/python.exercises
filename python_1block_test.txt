# when posting first part of second day's session (24.08.2023 - 02:50)
# i realized that some terminal responses and some prints are same
# hence, there will be a regex problem to clean this text hereby presented

# i realized i didn't have the include date in the first line
# because i am already using a version control software for storing this info.
# besides, every line will be ever existing, once I add the commit.
# i only know connecting to GitHub with R Studio, not VSCode or others(jupyter)
# now i realized that I can track the date of my current-old main discussions here.
# less repeat, more check
# version control magic
# 0
# 0
# 0
# 0
# 2

# Doing Numpy training


Python 3.10.4 (tags/v3.10.4:9d38120, Mar 23 2022, 23:13:41) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> a = 4165
>>> c = seq(1, 1000, 5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'seq' is not defined. Did you mean: 'set'?
>>> a = "This was very strange"
>>> b = "name this"
>>>
>>> for i in a:
...  c = int,
...     c = c + 1
  File "<stdin>", line 3
    c = c + 1
TabError: inconsistent use of tabs and spaces in indentation
>>> c = 0
>>>
>>> for i in a:
...     c = c + 1
...     print(c)
...     if c/2 = 17:
  File "<stdin>", line 4
    if c/2 = 17:
       ^^^
SyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?
>>> for i in a:
...     c = c + 1
...     print(c)
...     if c == 17:
...             print("Day")
...     elif:
  File "<stdin>", line 6
    elif:
        ^
SyntaxError: invalid syntax
>>>
>>>
>>> for i in a:
...     c = c+1
...     print(c)
...     if c == 17:
...             print("Day 17")
...     elif c == 7 :
...             print("Month 7")
...     elif c == 1996 :
...             print("Year 1996")
...
1
2
3
4
5
6
7
Month 7
8
9
10
11
12
13
14
15
16
17
Day 17
18
19
20
21
>>>
>>>
>>> for i in a and b:
...     if c % 2 = TRUE:
  File "<stdin>", line 2
    if c % 2 = TRUE:
       ^^^^^
SyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?
>>> for i in a & b:
...     if c % 2 == TRUE:
...             print("that's odd")
...     else:
...             print("now it's even")
...
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for &: 'str' and 'str'
>>> def even_odd:
  File "<stdin>", line 1
    def even_odd:
                ^
SyntaxError: invalid syntax
>>> def even_odd
  File "<stdin>", line 1
    def even_odd
                ^
SyntaxError: invalid syntax
>>> def even_odd() :
...     for i in a :
...              c = c + 1
...             if c % 2 = 0:
  File "<stdin>", line 4
    if c % 2 = 0:
                 ^
IndentationError: unindent does not match any outer indentation level
>>> def even_odd() :
...     for i in a :
...              c = c + 1
...             if c % 2 == 0:
  File "<stdin>", line 4
    if c % 2 == 0:
                  ^
IndentationError: unindent does not match any outer indentation level
>>> def even_odd() :
...     for i in a :
...              c = c + 1
...              c = c + 1
...
>>> def even_odd() :
...     for i in a :
...
  File "<stdin>", line 3

IndentationError: expected an indented block after 'for' statement on line 2
>>> def even_odd() :
...     for i in a :
...             c = c + 1
...             if c % 2 == 0:
...                     print("now it's even")
...             else: print("that's odd")
...
>>> even_odd(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: even_odd() takes 0 positional arguments but 1 was given
>>> def even_odd(a) :
...     for i in a :
...             c = c + 1
...             if c % 2 == 0:
...                     print("now it's even")
...             else: print("that's odd")
...
>>> even_odd(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in even_odd
UnboundLocalError: local variable 'c' referenced before assignment
>>> def even_odd(a) :
...     c = int()
...     for i in a :
...
  File "<stdin>", line 4

IndentationError: expected an indented block after 'for' statement on line 3
>>> %save
  File "<stdin>", line 1
    %save
    ^
SyntaxError: invalid syntax
>>> %save freestyle 1
  File "<stdin>", line 1
    %save freestyle 1
    ^
SyntaxError: invalid syntax
>>> %save freestyle 1:
  File "<stdin>", line 1
    %save freestyle 1:
    ^
SyntaxError: invalid syntax
>>> %save freestyle
  File "<stdin>", line 1
    %save freestyle
    ^
SyntaxError: invalid syntax
>>> %save freestyle:
  File "<stdin>", line 1
    %save freestyle:
    ^
SyntaxError: invalid syntax
>>> %save "freestyle"
  File "<stdin>", line 1
    %save "freestyle"
    ^
SyntaxError: invalid syntax
>>> for i in a:
...     print("how to save through python shell")
...
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
how to save through python shell
>>> for i in a:
...     c = c + 1
...     print("c")
...
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
>>> for i in a:
...     c = c + 1
...     print(c)
...
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
>>> for i in a:
...     if c % 2 == 0:
...             print("now that's even")
...     else:
...             print("now it's odd")
...
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
now it's odd
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>> while c = TRUE:
  File "<stdin>", line 1
    while c = TRUE:
          ^^^^^^^^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?
>>> a + b
'This was very strangename this'
>>> b + a
'name thisThis was very strange'
>>> print("enough one liners" + " " + "hello world")
enough one liners hello world
>>>


Python 3.10.4 (tags/v3.10.4:9d38120, Mar 23 2022, 23:13:41) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> a = int()
>>> type(a)
<class 'int'>
>>> print(a)
0
>>> b = a + 1
>>> c = int()
>>> d = c + 1
>>> e = list()
>>> for i in b:
...     print(b)
...
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not iterable
>>> f = str(b + (1.2*d)**3)
>>> for i in f:
...     print(f)
...
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
2.7279999999999998
>>> len(f)
18
>>>

Python 3.10.4 (tags/v3.10.4:9d38120, Mar 23 2022, 23:13:41) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> a = seq(1,100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'seq' is not defined. Did you mean: 'set'?
>>> a = range(1,100)
>>> b = range (101,199,2)
>>> c = dict(a,b)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: dict expected at most 1 argument, got 2
>>> c = dict(key=a, value=b)
>>> print(c)
{'key': range(1, 100), 'value': range(101, 199, 2)}
>>> c
{'key': range(1, 100), 'value': range(101, 199, 2)}
>>> c[3]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 3
>>> a
range(1, 100)
>>> a = list(range(1,100))
>>> a
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
>>> b = list(range(101,199,2))
>>> c = (key=a, value=b)
  File "<stdin>", line 1
    c = (key=a, value=b)
         ^^^^^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?
>>> c = dict(key=a, value=b)
>>> print(c)
{'key': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], 'value': [101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197]}
>>> c[3]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 3
>>> c[101]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 101
>>> c[key=3]
  File "<stdin>", line 1
    c[key=3]
      ^^^^^
SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?
>>> c[key==3]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'key' is not defined
>>> c[a]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> print(c[3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 3
>>> dict[c]
dict[{'key': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], 'value': [101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197]}]
>>> c[1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 1
>>> c["1"]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: '1'
>>> c.get(3)
>>> print(c.get(3))
None
>>> print(c.get(a))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> c(key)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'key' is not defined
>>> c.get(key)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'key' is not defined
>>> x.items()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'x' is not defined
>>> c.items()
dict_items([('key', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]), ('value', [101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197])])
>>> c[1] = 101
>>> print(c)
{'key': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], 'value': [101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197], 1: 101}
>>> c.get("key")
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
>>> if 5 in c:
...     print("yes")
...
>>>
>>> if "5" in c:
...     print("yes")
...
>>> c.get()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: get expected at least 1 argument, got 0
>>> c  = dict()
>>> print(c)
{}
>>> for i in a:
...     for u in b:
...             c[i] = u
...
>>> print(c)
{1: 197, 2: 197, 3: 197, 4: 197, 5: 197, 6: 197, 7: 197, 8: 197, 9: 197, 10: 197, 11: 197, 12: 197, 13: 197, 14: 197, 15: 197, 16: 197, 17: 197, 18: 197, 19: 197, 20: 197, 21: 197, 22: 197, 23: 197, 24: 197, 25: 197, 26: 197, 27: 197, 28: 197, 29: 197, 30: 197, 31: 197, 32: 197, 33: 197, 34: 197, 35: 197, 36: 197, 37: 197, 38: 197, 39: 197, 40: 197, 41: 197, 42: 197, 43: 197, 44: 197, 45: 197, 46: 197, 47: 197, 48: 197, 49: 197, 50: 197, 51: 197, 52: 197, 53: 197, 54: 197, 55: 197, 56: 197, 57: 197, 58: 197, 59: 197, 60: 197, 61: 197, 62: 197, 63: 197, 64: 197, 65: 197, 66: 197, 67: 197, 68: 197, 69: 197, 70: 197, 71: 197, 72: 197, 73: 197, 74: 197, 75: 197, 76: 197, 77: 197, 78: 197, 79: 197, 80: 197, 81: 197, 82: 197, 83: 197, 84: 197, 85: 197, 86: 197, 87: 197, 88: 197, 89: 197, 90: 197, 91: 197, 92: 197, 93: 197, 94: 197, 95: 197, 96: 197, 97: 197, 98: 197, 99: 197}
>>> b
[101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197]
>>> c = dict()
>>> for i in a:
...     for u in b:
...             c[i] = u
...             b.remove(u)
...
>>> print(c)
{1: 197, 2: 191, 3: 187, 4: 179, 5: 195, 6: 163}
>>> b
[]
>>>


Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\omen> python
Python 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32

Warning:
This Python interpreter is in a conda environment, but the environment has
not been activated.  Libraries may fail to load.  To activate this environment
please see https://conda.io/activation

Type "help", "copyright", "credits" or "license" for more information.
>>> import numpy
>>> myarr = numpy.arrange(12).reshape(3,4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\__init__.py", line 313, in __getattr__
    raise AttributeError("module {!r} has no attribute "
AttributeError: module 'numpy' has no attribute 'arrange'
>>> myarr = np.arrange(12).reshape(3,4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'np' is not defined
>>> import numpy as np
>>> myarr = np.arrange(12).reshape(3,4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\__init__.py", line 313, in __getattr__
    raise AttributeError("module {!r} has no attribute "
AttributeError: module 'numpy' has no attribute 'arrange'
>>> myarr = np.arange(12).reshape(3,4)
>>> myarr
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>>> myarr.dim
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'numpy.ndarray' object has no attribute 'dim'
>>> myarr.ndim
2
>>> myarr[2,3]
11
>>> myarrsl = myarr[:2, 2:3]
>>> myarrsl
array([[2],
       [6]])
>>> myarrsl1 = myarr[:2, 2]
>>> myarrsl1
array([2, 6])
>>> print(myarrsl.ndim, myarrsl1.ndim)
2 1
>>> myarand = np.random(0,2).random(3,3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'module' object is not callable
>>> myarand = np.random(0,2).random((3,3))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'module' object is not callable
>>> myarand = np.random.random((3,3))
>>> myarand
array([[0.87823165, 0.680506  , 0.8657329 ],
       [0.95027031, 0.3417584 , 0.70788283],
       [0.68240927, 0.13705958, 0.65120832]])
>>> myarand = np.random((3,3))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'module' object is not callable
>>> a1 = np.random()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'module' object is not callable
>>> a1 = np.random
>>> a1
<module 'numpy.random' from 'C:\\Users\\omen\\anaconda3\\lib\\site-packages\\numpy\\random\\__init__.py'>
>>> type(a1)
<class 'module'>
>>> a1 = np.random.random(4,4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "mtrand.pyx", line 427, in numpy.random.mtrand.RandomState.random
TypeError: random() takes at most 1 positional argument (2 given)
>>> a1 = np.random.random(3)
>>> a1
array([0.99091408, 0.83173824, 0.91159264])
>>> a1 = np.random.random((4,4))
>>> a1.round()
array([[1., 1., 1., 0.],
       [1., 0., 1., 0.],
       [1., 0., 0., 1.],
       [0., 1., 0., 1.]])
>>> a1
array([[0.52339797, 0.56347129, 0.73496913, 0.13132184],
       [0.90676826, 0.30238848, 0.61820449, 0.45691656],
       [0.62928412, 0.31145785, 0.30708269, 0.51373667],
       [0.34159257, 0.76483974, 0.22622504, 0.76122866]])
>>> a1.round(2)
array([[0.52, 0.56, 0.73, 0.13],
       [0.91, 0.3 , 0.62, 0.46],
       [0.63, 0.31, 0.31, 0.51],
       [0.34, 0.76, 0.23, 0.76]])
>>> a1[:3, :3]
array([[0.52339797, 0.56347129, 0.73496913],
       [0.90676826, 0.30238848, 0.61820449],
       [0.62928412, 0.31145785, 0.30708269]])
>>> a1[::3, ::3]
array([[0.52339797, 0.13132184],
       [0.34159257, 0.76122866]])
>>> a1[::2, ::2]
array([[0.52339797, 0.73496913],
       [0.62928412, 0.30708269]])
>>> a1[:2:2, :2:2]
array([[0.52339797]])
>>> a1[:1:2, :1:2]
array([[0.52339797]])
>>> a1[:1:1, :1:1]
array([[0.52339797]])
>>> a1[1::2, 1::2]
array([[0.30238848, 0.45691656],
       [0.76483974, 0.76122866]])
>>> a2 = np.array[(1:3), (3:6), (4:8)]
  File "<stdin>", line 1
    a2 = np.array[(1:3), (3:6), (4:8)]
                    ^
SyntaxError: invalid syntax
>>> a2 = np.array[[1:3], [3:6], [4:8]]
  File "<stdin>", line 1
    a2 = np.array[[1:3], [3:6], [4:8]]
                    ^
SyntaxError: invalid syntax
>>> a2 = np.array([1:3], [3:6], [4:8])
  File "<stdin>", line 1
    a2 = np.array([1:3], [3:6], [4:8])
                    ^
SyntaxError: invalid syntax
>>> a2 = np.array([1,3], [3,6], [4,8])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: array() takes from 1 to 2 positional arguments but 3 were given
>>> a2 = np.array([[1,3], [3,6]], [4,8])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Field elements must be 2- or 3-tuples, got '4'
>>> a2 = np.array([[[1,3], [3,6]], [4,8]])
<stdin>:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
>>> a2
array([[list([1, 3]), list([3, 6])],
       [4, 8]], dtype=object)
>>> a2 = np.array([[np.arange(10).reshape(2,5)], np.arange(10).reshape(1,10)]])
  File "<stdin>", line 1
    a2 = np.array([[np.arange(10).reshape(2,5)], np.arange(10).reshape(1,10)]])
                                                                             ^
SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
>>> a2 = np.array([[np.arange(10).reshape(2,5)], np.arange(10).reshape(1,10)])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: could not broadcast input array from shape (10,) into shape (1,)
>>> a2.ravel
<built-in method ravel of numpy.ndarray object at 0x000002AC3AECD150>
>>> a2.ravel()
array([list([1, 3]), list([3, 6]), 4, 8], dtype=object)
>>> print(a2)
[[list([1, 3]) list([3, 6])]
 [4 8]]
>>> a2.ndim()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not callable
>>> type(a2)
<class 'numpy.ndarray'>
>>> a2.ndim
2
>>> np.transpose(a2)
array([[list([1, 3]), 4],
       [list([3, 6]), 8]], dtype=object)
>>> a2
array([[list([1, 3]), list([3, 6])],
       [4, 8]], dtype=object)
>>> a2[0,]
array([list([1, 3]), list([3, 6])], dtype=object)
>>> a2[,0}
  File "<stdin>", line 1
    a2[,0}
       ^
SyntaxError: invalid syntax
>>> a2[,0]
  File "<stdin>", line 1
    a2[,0]
       ^
SyntaxError: invalid syntax
>>> a2[:,0]
array([list([1, 3]), 4], dtype=object)
>>> a3 = a2*2
>>> a3.ndim
2
>>> np.hstack(a2,a3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 4, in hstack
TypeError: _vhstack_dispatcher() takes 1 positional argument but 2 were given
>>> np.hstack((a2,a3))
array([[list([1, 3]), list([3, 6]), list([1, 3, 1, 3]),
        list([3, 6, 3, 6])],
       [4, 8, 8, 16]], dtype=object)
>>> np.hsplit(a2,2)
[array([[list([1, 3])],
       [4]], dtype=object), array([[list([3, 6])],
       [8]], dtype=object)]
>>> np.vsplit(a2,2)
[array([[list([1, 3]), list([3, 6])]], dtype=object), array([[4, 8]], dtype=object)]
>>> arr = np.arange(100)
>>> arr
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])
>>> arr = arr.reshape(10,10)
>>> arr
array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
       [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
       [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
       [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],
       [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],
       [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])
>>> np.mean(arr, axis=0=
  File "<stdin>", line 1
    np.mean(arr, axis=0=
                       ^
SyntaxError: invalid syntax
>>> np.mean(arr, axis=0)
array([45., 46., 47., 48., 49., 50., 51., 52., 53., 54.])
>>> np.mean(arr)
49.5
>>> np.mean(arr, axis=1)
array([ 4.5, 14.5, 24.5, 34.5, 44.5, 54.5, 64.5, 74.5, 84.5, 94.5])
>>> np.mean(arr, axis=2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in mean
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\fromnumeric.py", line 3440, in mean
    return _methods._mean(a, axis=axis, dtype=dtype,
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\_methods.py", line 167, in _mean
    rcount = _count_reduce_items(arr, axis, keepdims=keepdims, where=where)
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\_methods.py", line 76, in _count_reduce_items
    items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]
numpy.AxisError: axis 2 is out of bounds for array of dimension 2
>>> np.arange(16).reshape(4,4)[:2, :]
array([[0, 1, 2, 3],
       [4, 5, 6, 7]])
>>> np.arange(16).reshape(4,4).split(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'numpy.ndarray' object has no attribute 'split'
>>> np.arange(16).reshape(4,4).split(2,2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'numpy.ndarray' object has no attribute 'split'
>>> arr = np.arange(16).reshape(4,4)
>>> np.split(arr,2)
[array([[0, 1, 2, 3],
       [4, 5, 6, 7]]), array([[ 8,  9, 10, 11],
       [12, 13, 14, 15]])]
>>> arr
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])
>>> np.arange(16).reshape(4,4).split(2,)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'numpy.ndarray' object has no attribute 'split'
>>> np.arange(16).reshape(4,4).np.split(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'numpy.ndarray' object has no attribute 'np'
>>> np.arange(16).reshape(4,4).split(,2)
  File "<stdin>", line 1
    np.arange(16).reshape(4,4).split(,2)
                                     ^
SyntaxError: invalid syntax
>>> split(arr,2, axis=1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'split' is not defined
>>> np.split(arr,2,axis=1)
[array([[ 0,  1],
       [ 4,  5],
       [ 8,  9],
       [12, 13]]), array([[ 2,  3],
       [ 6,  7],
       [10, 11],
       [14, 15]])]
>>> arr = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]])
>>> arr
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12],
       [13, 14, 15, 16]])
>>> arr.ndim
2
>>> type(arr)
<class 'numpy.ndarray'>
>>> print(arr)
[[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]
 [13 14 15 16]]
>>> arr1 = arr[:2, :2]
>>> arr1
array([[1, 2],
       [5, 6]])
>>> arr1 = arr1.ravel()
>>> arr1
array([1, 2, 5, 6])
>>> arr2 = arr1*2
>>> arr2
array([ 2,  4, 10, 12])
>>> np.vstack(arr1,arr2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 4, in vstack
TypeError: _vhstack_dispatcher() takes 1 positional argument but 2 were given
>>> np.vstack((arr1,arr2))
array([[ 1,  2,  5,  6],
       [ 2,  4, 10, 12]])
>>> arr1 = np.array([[1,2], [3,4]])
>>> arr2 = np.array([5,6])
>>> arr3 = np.vstack((arr1,arr2))
>>> arr3
array([[1, 2],
       [3, 4],
       [5, 6]])
>>> arr3 = np.hstack((arr1,arr2))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in hstack
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\shape_base.py", line 345, in hstack
    return _nx.concatenate(arrs, 1)
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)
>>> arr3
array([[1, 2],
       [3, 4],
       [5, 6]])
>>> arr3[:-1, :-1]
array([[1],
       [3]])
>>> arr3[-1, -1]
6
>>> arr5 = np.arange(30).reshape(5,6)
>>> arr5 = arr5[:3, :]
>>> arr5
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17]])
>>> np.split(arr5, 2, axis=1)
[array([[ 0,  1,  2],
       [ 6,  7,  8],
       [12, 13, 14]]), array([[ 3,  4,  5],
       [ 9, 10, 11],
       [15, 16, 17]])]
>>> arr6 = np.arange(1,17).reshape(4,4)
>>> arr6
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12],
       [13, 14, 15, 16]])
>>> arr7 = arr6[:, 1]
>>> arr6 = np.hstack(arr6,arr7)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 4, in hstack
TypeError: _vhstack_dispatcher() takes 1 positional argument but 2 were given
>>> arr6 = np.hstack((arr6,arr7))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in hstack
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\shape_base.py", line 345, in hstack
    return _nx.concatenate(arrs, 1)
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)
>>> arr7
array([ 2,  6, 10, 14])
>>> arr7 = arr7.transpose()
>>> arr6 = np.hstack((arr6,arr7))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in hstack
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\shape_base.py", line 345, in hstack
    return _nx.concatenate(arrs, 1)
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)
>>> arr7
array([ 2,  6, 10, 14])
>>> arr6 = np.hstack(arr6,arr6)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 4, in hstack
TypeError: _vhstack_dispatcher() takes 1 positional argument but 2 were given
>>> arr6 = np.hstack((arr6,arr6))
>>> arr6
array([[ 1,  2,  3,  4,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  5,  6,  7,  8],
       [ 9, 10, 11, 12,  9, 10, 11, 12],
       [13, 14, 15, 16, 13, 14, 15, 16]])
>>> arr6 = np.hstack((arr6,arr7))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in hstack
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\shape_base.py", line 345, in hstack
    return _nx.concatenate(arrs, 1)
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)
>>> arr7 = arr7.transpose()
>>> arr6 = np.hstack((arr6,arr7))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in hstack
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\shape_base.py", line 345, in hstack
    return _nx.concatenate(arrs, 1)
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)
>>> arr7 = np.transpose(arr7)
>>> arr6 = np.hstack((arr6,arr7))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in hstack
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\shape_base.py", line 345, in hstack
    return _nx.concatenate(arrs, 1)
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)
>>> arr8 = np.hstack((arr6,arr7))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in hstack
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\shape_base.py", line 345, in hstack
    return _nx.concatenate(arrs, 1)
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)
>>> arr7 = np.transpose(arr7)
>>> arr8 = np.hstack((arr6,arr7))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in hstack
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\shape_base.py", line 345, in hstack
    return _nx.concatenate(arrs, 1)
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)
>>> arr8 = np.concatenate((arr6,arr7))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)
>>> arr7 = np.transpose(arr7)
>>> arr8 = np.concatenate((arr6,arr7))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)
>>> arr7
array([ 2,  6, 10, 14])
>>> arr6
array([[ 1,  2,  3,  4,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  5,  6,  7,  8],
       [ 9, 10, 11, 12,  9, 10, 11, 12],
       [13, 14, 15, 16, 13, 14, 15, 16]])
>>> arr6 = np.arange(1,17).reshape(4,4)
>>> np.hstack(arr6,arr7)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 4, in hstack
TypeError: _vhstack_dispatcher() takes 1 positional argument but 2 were given
>>> np.vstack(arr6,arr7)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 4, in vstack
TypeError: _vhstack_dispatcher() takes 1 positional argument but 2 were given
>>> np.vstack((arr6,arr7))
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12],
       [13, 14, 15, 16],
       [ 2,  6, 10, 14]])
>>> np.transpose(arr7)
array([ 2,  6, 10, 14])
>>> np.hstack((arr6,np.transpose(arr7)))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<__array_function__ internals>", line 5, in hstack
  File "C:\Users\omen\anaconda3\lib\site-packages\numpy\core\shape_base.py", line 345, in hstack
    return _nx.concatenate(arrs, 1)
  File "<__array_function__ internals>", line 5, in concatenate
ValueError: all the input arrays must have same number of dimensions, but the array at index 0 has 2 dimension(s) and the array at index 1 has 1 dimension(s)
>>> arr6
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12],
       [13, 14, 15, 16]])
>>> arr7
array([ 2,  6, 10, 14])
>>> arr6 = np.column_stack((arr6,arr7))
>>> arr6
array([[ 1,  2,  3,  4,  2],
       [ 5,  6,  7,  8,  6],
       [ 9, 10, 11, 12, 10],
       [13, 14, 15, 16, 14]])
>>>
