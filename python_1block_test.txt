I might delete it later
for now, these are latest exercises
from learn python the hard way

I learned {} use 
(means: I am ready to operate an e-mail service)

I reviewed functions a bit


>>> print(end1 + end2 + end3 + end4 + end5 + end6, end=' ')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'end1' is not defined
>>>  end1 = "C"
  File "<stdin>", line 1
    end1 = "C"
IndentationError: unexpected indent
>>>  end2 = "h"
  File "<stdin>", line 1
    end2 = "h"
IndentationError: unexpected indent
>>>  end3 = "e"
  File "<stdin>", line 1
    end3 = "e"
IndentationError: unexpected indent
>>>  end4 = "e"
  File "<stdin>", line 1
    end4 = "e"
IndentationError: unexpected indent
>>>  end5 = "s"
  File "<stdin>", line 1
    end5 = "s"
IndentationError: unexpected indent
>>>  end6 = "e"
  File "<stdin>", line 1
    end6 = "e"
IndentationError: unexpected indent
>>> end1 = "a"
>>> end2 = "b"
>>> end3= "c"
>>> end4 = "c"
>>> end4 = "d"
>>> end5 = "e"
>>> end6 = "f"
>>> print(end1 + end2 + end3 + end4 + end5 + end6, end=' ')
abcdef >>>
>>> print(end1 + end2 + end3 + end4 + end5 + end6)
abcdef
>>> print(end1 + end2 + end3 + end4 + end5 + end6, end=' ')
abcdef >>> print(end1 + end2 + end3 + end4 + end5 + end6, end=' ')
abcdef >>>
>>> print("this is a style to not end the line", now= " ")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'now' is an invalid keyword argument for print()
>>> print("this is a style to not end the line", end= " ")
this is a style to not end the line >>> answer = input()
yes it is
>>> print("this is a style to not end the line", end= " ", "{}")
  File "<stdin>", line 1
    print("this is a style to not end the line", end= " ", "{}")
                                                               ^
SyntaxError: positional argument follows keyword argument
>>> print("this is a style to not end the line","{}", end= " ")
this is a style to not end the line {} >>> correction = "be careful"
>>> print(f"this is a style to not end the line.","Actually, {answer}","You must {correction}.", end= " ")
this is a style to not end the line. Actually, {answer} You must {correction}. >>> print(f"this is a style to not end {3} the line.",f"Actually, {answer}",f"You must {correction}.", end= " ")
this is a style to not end 3 the line. Actually, yes it is You must be careful. >>>
>>> from sys import argv
>>> script one two three four = argv
  File "<stdin>", line 1
    script one two three four = argv
           ^
SyntaxError: invalid syntax
>>> script, one, two, three, four = argv
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not enough values to unpack (expected 5, got 1)
>>> script, first, second, third = argv
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not enough values to unpack (expected 4, got 1)
>>> argv
['']
>>> from sys import argv
>>> argv
['']
>>> print("enough, we left at ex14")
enough, we left at ex14
>>>



Microsoft Windows [Version 10.0.19045.3570]
(c) Microsoft Corporation. All rights reserved.

C:\Users\omen>python
Python 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> def my1_func(this):
...     this = this*3
...     print(this)
...
>>> my1_func(243)
729
>>> my1_func(words)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'words' is not defined
>>> my1_func("words")
wordswordswords
>>>

Microsoft Windows [Version 10.0.19045.3570]
(c) Microsoft Corporation. All rights reserved.

C:\Users\omen>python
Python 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> 1 == 1 and 2 == 3
False
>>> 1 == 1 or 2 == 3
True
>>> def bear_room():
...     print("There A BEARR!")
...     print("shhh")
...     bear_moved = False
...
>>> wile True:
  File "<stdin>", line 1
    wile True:
         ^^^^
SyntaxError: invalid syntax
>>> while True:
...     choice = input("> ")
...     if choice == "take honey":
...             dead("bear slaps you")
...     elif choic == "taunt bear" and not bear_moved:
...             print("bear moved")
...             bear_moved = True
...     elif choice == "taunt bear" and bear_moved:
...             dead(" the bear is coming thru")
...     elif choice == "open door" and bear_moved:
...             gold_room()
...     else:
...             print("I dunno")
...
>
Microsoft Windows [Version 10.0.19045.3570]
(c) Microsoft Corporation. All rights reserved.

C:\Users\omen>python
Python 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> ten_things = "Apples Oranges Crows Telephone L
  File "<stdin>", line 1
    ten_things = "Apples Oranges Crows Telephone L
                 ^
SyntaxError: unterminated string literal (detected at line 1)
>>> ten_things = "Apples Oranges Crows Telephone Light Sugar"
>>> print("let's pop this list")
let's pop this list
>>> stuff = ten_things.split("")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: empty separator
>>> stuff = ten_things.split(" ")
>>> more_stuff = ["Day", "Night", "Song"
...  ,
...
... "Frisbee", "Corn", "Banana", "Girl", "Boy"]
>>> print("I just accidentally used multiple lines for creating this list")
I just accidentally used multiple lines for creating this list
>>> while len(stuff) != 10:
...     next_one = more_stuff.pop()
...     print("Adding: ", next_one)
...     stuff.append(next_one)
...     print(f"There are {len(stuff)} items now.")
...
Adding:  Boy
There are 7 items now.
Adding:  Girl
There are 8 items now.
Adding:  Banana
There are 9 items now.
Adding:  Corn
There are 10 items now.
>>> print("this counts backwards")
this counts backwards
>>> states = {
...     "Oregon": "OR",
...     "Florida": "FL"}
>>> cities = {
...     "OR" = "Portland"}
  File "<stdin>", line 2
    "OR" = "Portland"}
    ^^^^
SyntaxError: cannot assign to literal here. Maybe you meant '==' instead of '='?
>>> cities = {
...     "OR": "Portlan"}
>>> cities["FL"] = "Jacksonville"
>>> print("Florida has: ", cities[states["Florida"]])
Florida has:  Jacksonville
>>> print("Oregon has: ", cities[states["Oregon"]])
Oregon has:  Portlan
>>> print("close enough")
close enough
>>> for abbrev, city in list(cities.items()):
...     print(f"{abbrev} has the city {city}")
...
OR has the city Portlan
FL has the city Jacksonville
>>> print("left at OOP, ex40")
left at OOP, ex40
>>>